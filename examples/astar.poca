// A* Pathfinding implementation

// Grid: 2D array (grid[y][x]), where 0 = walkable, 1 = blocked
// start and goal: objects with 'x' and 'y' properties indicating positions on the grid

function aStar(grid, start, goal) {

  var openList = [];
  var closedList = [];
  var nodes = [];
  var i, j;

  // Create a node for each grid cell
  for (i = 0; i < grid.size(); i++) {
    let row = [];
    for (j = 0; j < grid[i].size(); j++) {
      row.push(
        {
          x: j,
          y: i,
          f: 0, // total cost (g + h)
          g: 0, // cost from start to this node
          h: 0, // heuristic cost from this node to goal
          parent: null,
          walkable: (grid[i][j] === 0)
        }
      );
    }
    nodes.push(row);
  }
  
  // Helper function: Manhattan distance as heuristic
  function heuristic(a, b) {
    return Math.abs(a.x - b.x) + Math.abs(a.y - b.y);
  }
  
  // Initialize start and goal nodes
  var startNode = nodes[start.y][start.x];
  var goalNode = nodes[goal.y][goal.x];
  openList.push(startNode);

  // Main loop
  while (openList.size() > 0) {

    // Find the node with the lowest 'f' value in the open list
    var lowestIndex = 0;
    for (i = 1; i < openList.size(); i++) {
      if (openList[i].f < openList[lowestIndex].f) {
        lowestIndex = i;
      }
    }
    var currentNode = openList[lowestIndex];

    // If we reached the goal, reconstruct and return the path
    if (currentNode === goalNode) {
      var curr = currentNode;
      var path = [];
      while (curr.parent) {
        path.push({ x: curr.x, y: curr.y });
        curr = curr.parent;
      }
      path.push({ x: startNode.x, y: startNode.y });
      path.reverse();
      return path;
    }

    // Move current node from openList to closedList
    openList.splice(lowestIndex, 1);
    closedList.push(currentNode);

    // Get neighboring nodes (up, down, left, right)
    var neighbors = [];
    var x = currentNode.x;
    var y = currentNode.y;
    if (y > 0) { // up
      neighbors.push(nodes[y - 1][x]);
    }
    if ((y + 1) < grid.size()){ // down
      neighbors.push(nodes[y + 1][x]);
    }
    if (x > 0) { // left
      neighbors.push(nodes[y][x - 1]);
    }
    if ((x + 1) < grid[0].size()) { // right
      neighbors.push(nodes[y][x + 1]);
    }
    
    // Process each neighbor
    for (i = 0; i < neighbors.size(); i++) {
      var neighbor = neighbors[i];

      // Skip if neighbor is not walkable or is already in the closed list
      if (!neighbor.walkable) {
        continue;
      }
      var inClosed = false;
      for (j = 0; j < closedList.size(); j++) {
        if (closedList[j] === neighbor) {
          inClosed = true;
          break;
        }
      }
      if (inClosed) {
        continue;
      }
      
      // Calculate tentative g score (assumes cost of 1 to move to a neighbor)
      var tentativeG = currentNode.g + 1;

      var inOpen = false;
      for (j = 0; j < openList.size(); j++) {
        if (openList[j] === neighbor) {
          inOpen = true;
          break;
        }
      }
      
      // If neighbor is not in open list or we've found a better path, update it
      if (!inOpen || tentativeG < neighbor.g) {
        neighbor.g = tentativeG;
        neighbor.h = heuristic(neighbor, goalNode);
        neighbor.f = neighbor.g + neighbor.h;
        neighbor.parent = currentNode;
        
        if (!inOpen) {
          openList.push(neighbor);
        }
      }
    }
  }
  
  // No path found; return empty array
  return [];
}

// Example usage:
let grid = [
  [0, 0, 0, 0, 0],
  [0, 1, 1, 1, 0],
  [0, 0, 0, 0, 0]
];

let start = { x: 0, y: 0 };
let goal = { x: 4, y: 2 };

let path = aStar(grid, start, goal);
if (path.size() > 0) {
  for (let i = 0; i < path.size(); i++) {
    Console.log("Step ", i, ": (", path[i].x, ", ", path[i].y, ")");
  }
} else {
  Console.log("No path found.");
}
