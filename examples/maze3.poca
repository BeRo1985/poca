function makeMaze(w, h) {

  // Create visibility grid
  var vis = [];
  for (var i = 0; i < h; i++) {
    let row = [];
    for (let j = 0; j < w; j++) {
      row.push(0);
    }
    row.push(1); // add the 1 at the end of each row
    vis.push(row);
  }
  let lastRow = [];
  for (let j = 0; j < w + 1; j++) {
    lastRow.push(1);
  }
  vis.push(lastRow);

  // Create vertical walls
  var ver = [];
  for (let i = 0; i < h; i++) {
    let row = [];
    for (let j = 0; j < w; j++) {
      row.push("|  ");
    }
    row.push("|"); // end wall
    ver.push(row);
  }
  ver.push([]); // empty last row for vertical walls

  // Create horizontal walls
  var hor = [];
  for (let i = 0; i <= h; i++) {
    let row = [];
    for (let j = 0; j < w; j++) {
      row.push("+--");
    }
    row.push("+"); // end wall
    hor.push(row);
  }

  // Walk function to generate maze
  function walk(x, y) {
    vis[y][x] = 1;

    let directions = [
      [x - 1, y],
      [x, y + 1],
      [x + 1, y],
      [x, y - 1]
    ];

    // Shuffle directions
    for (let i = directions.size() - 1; i > 0; i--) {
      let j = Math.floor(Math.random() * (i + 1));
      (directions[i], directions[j]) = (directions[j], directions[i]);
    }

    for (var i = 0; i < directions.size(); i++) {

      let (xx, yy) = (directions[i][0], directions[i][1]);

      if (vis[yy][xx]) continue;
      if (xx === x) hor[Math.max(y, yy)][x] = "+  ";
      if (yy === y) ver[y][Math.max(x, xx)] = "   ";
      walk(xx, yy);
    }
  }

  walk(Math.floor(Math.random() * w), Math.floor(Math.random() * h));

  // Build the maze string
  let result = "";
  for (var i = 0; i < h; i++) {
    for (var j = 0; j < w + 1; j++) {
      result ~= hor[i][j];
    }
    result ~= "\n";
    for (var j = 0; j < w + 1; j++) {
      result ~= ver[i][j];
    }
    result ~= "\n";
  }
  for (var j = 0; j < w + 1; j++) {
    result ~= hor[h][j];
  }

  return result ~ "\n";
}

print(makeMaze(16, 8));
