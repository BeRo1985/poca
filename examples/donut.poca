// 3D Donut

(function(){
  const (canvasWidth, canvasHeight) = (80, 24);
  const canvasSize = canvasHeight * canvasWidth;
  const (xOffset, yOffset, innerRadius, fov, w) = (40, 12, 2, 5, 30);
  const (tau, u) = (Math.PI * 2.0, '.,-~:;=!*#$@');
  const q = (((u.length() + 1) * 2) / 3) << 0;      
  let (A, B, b, z) = (0, 0, new Array(canvasSize), new Array(7040));
  do{
    b.fill(' ');
    z.fill(0);
    for (let j = 0; j < tau; j += tau / 90.0) {
      for (let i = 0; i < tau; i += tau / 314.0) {
        let (c, d, e, f, g) = (Math.sin(i), Math.cos(j), Math.sin(A), Math.sin(j), Math.cos(A));
        let h = d + innerRadius;
        let (l, m, n) = (Math.cos(i), Math.cos(B), Math.sin(B));
        let (D, t) = (1.0 / ((c * h * e) + (f * g) + fov), (c * h * g) - (f * e));
        let (x, y) = ((xOffset + ((w * D) * ((l * h * m) - (t * n)))) << 0, (yOffset + (((w / 2) * D) * ((l * h * n) + (t * m)))) << 0);
        let (o, N) = (((y * canvasWidth) + x) << 0, (q * ((((((f * e) - (c * d * g)) * m) - (c * d * e)) - (f * g)) - (l * d * n))) << 0);
        if((x > 0) && (canvasWidth > x) && (y > 0) && (y < canvasHeight) && (D > z[o])) {
          z[o] = D;
          b[o] = (N > 0) ? N : 0;
        }
      }
    }
    print("\x1b[2J\x1b[H");
    let o = 0;
    for(let y = 0; y < canvasHeight; y++) {
      let r = "";
      for(let x = 0; x < canvasWidth; x++) {
        let l = b[o++];
        if (l == ' ') {
          r ~= ' ';
        } else {
          r ~= "\x1b[38;5;" ~ ((l & 7) + 202).toString() ~ "m" ~ u.charAt(l) ~ "\x1b[0m";
        }
      }
      print(r, "\n");
    }
    A += 0.02;
    B += 0.01;
  }while(1);
})();
